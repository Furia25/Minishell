r
n
n
n
n
n
n
n
n
exit
r
n
n
n
n
n
n
n
n
r
n
n
n
n
n
n
n
s
n
s
n
s
s
s
s
s
s
s
s
s
p (char *)last.value
s
p (char *)last.value
s
p (char *)last.value
s
p (char *)last.value
s
p (char *)last.value
s
p (char *)last.value
s
p (char *)last.value
s
s
s
s
s
s
s
s
n
n
p (char *)last.value
where
q
br gc_add
s
r
p prt
p ptr
p (char *)ptr
s
s
s
p (char *)ptr
s
s
s
s
s
s
s
p (char *)ptr

s
p (char *)ptr
p (char *)last.value

p (char *)last.value
s
p (char *)last.value
s
s
p (char *)last.value
s
p (char *)last.value
s
p (char *) ptr
s
s
q
br gc_add 
r
p (char *) ptr
s
s
s
p (char *) ptr
s
p (char *) last.value
s
p (char *) last.value
s
s
s
s
s
p (char *) last.value
s
p (char *) last.value
s
s
p (char *) last.value
s
s
s
exit
r
exit
b main
r
r
exit
b main
r
exit
r
qw
where
process follow-fork-mode child
set follow-fork-mode child
b tokens_to_str
r
r
exit
set follow-fork-mode child
b tokens_to_str
r
n
n
n
n
n
n
exit
b tokens_to_str
r
exit
set follow-fork-mode child
b tokens_to_str
r
n
n
n
exit
set follow-fork-mode child
b tokens_to_str
r
n
n
n
n
n
n
n
n
n
n
n
s
n
n
exit
set follow-fork-mode child
b tokens_to_str
r
n
n
n
n
n
n
n
n
n
n
n
n
s
r
n
n
n
n
n
n
n
n
n
n
s
n
n
n
n
n
n
exit
set follow-fork-mode child
b tokens_to_str
r
n
n
n
n
n
n
n
n
n
n
n
n
n
b create_and_add_
b create_and_add_dollars_nodes 
r
p *current->lexeme 
p *(current->lexeme) 
p *(current->next->lexeme) 
p *current->next->lexeme 
n
n
n
n
n
n
n
n
s
p *current->lexeme 
p *(current->lexeme) 
n
s
exit
